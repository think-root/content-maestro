name: Release content-maestro

on:
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm install

      - name: Release with tag conflict handling
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Function to get next patch version
          get_next_version() {
            local current_tag=$1
            if [[ $current_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              local major=${BASH_REMATCH[1]}
              local minor=${BASH_REMATCH[2]}
              local patch=${BASH_REMATCH[3]}
              echo "v$major.$minor.$((patch + 1))"
            else
              echo "v0.0.1"
            fi
          }
          
          # Try semantic-release first
          if npx semantic-release --debug; then
            echo "Semantic-release completed successfully"
            exit 0
          fi
          
          echo "Semantic-release failed, handling tag conflicts..."
          
          # Fetch all tags
          git fetch --tags
          
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest existing tag: $LATEST_TAG"
          
          # Generate next version
          NEXT_VERSION=$(get_next_version "$LATEST_TAG")
          echo "Next version will be: $NEXT_VERSION"
          
          # Check if the next version tag already exists and clean it up
          while git tag -l | grep -q "^$NEXT_VERSION$" || git ls-remote --tags origin | grep -q "refs/tags/$NEXT_VERSION$"; do
            echo "Tag $NEXT_VERSION already exists, removing it..."
            git tag -d "$NEXT_VERSION" 2>/dev/null || true
            git push origin ":refs/tags/$NEXT_VERSION" 2>/dev/null || true
            
            # Get next version after cleanup
            NEXT_VERSION=$(get_next_version "$NEXT_VERSION")
            echo "Trying next version: $NEXT_VERSION"
          done
          
          # Update package.json with new version
          NEW_VERSION_NUMBER=${NEXT_VERSION#v}
          echo "Updating package.json to version $NEW_VERSION_NUMBER"
          npm version $NEW_VERSION_NUMBER --no-git-tag-version
          
          # Commit the version change
          git add package.json
          git commit -m "chore(release): $NEW_VERSION_NUMBER [skip ci]"
          
          # Create and push the tag
          git tag $NEXT_VERSION
          git push origin main
          git push origin $NEXT_VERSION
          
          # Create GitHub release
          gh release create $NEXT_VERSION \
            --title "Release $NEXT_VERSION" \
            --notes "Automated release $NEXT_VERSION" \
            --target main
          
          echo "Successfully created release $NEXT_VERSION"
